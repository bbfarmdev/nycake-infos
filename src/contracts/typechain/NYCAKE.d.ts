/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NYCAKEInterface extends ethers.utils.Interface {
  functions: {
    "CAKE()": FunctionFragment;
    "SetBlacklistFee(uint256)": FunctionFragment;
    "_isBlacklisted(address)": FunctionFragment;
    "_isExcludedFromMaxWallet(address)": FunctionFragment;
    "_marketingWalletAddress()": FunctionFragment;
    "_maxWalletAmount()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistAddress(address,bool)": FunctionFragment;
    "buyFees()": FunctionFragment;
    "claim()": FunctionFragment;
    "deadWallet()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dividendTokenBalanceOf(address)": FunctionFragment;
    "dividendTracker()": FunctionFragment;
    "excludeFromDividends(address)": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxWallet(address,bool)": FunctionFragment;
    "gasForProcessing()": FunctionFragment;
    "getAccountDividendsInfo(address)": FunctionFragment;
    "getAccountDividendsInfoAtIndex(uint256)": FunctionFragment;
    "getClaimWait()": FunctionFragment;
    "getLastProcessedIndex()": FunctionFragment;
    "getMaxWalletAmount()": FunctionFragment;
    "getNumberOfDividendTokenHolders()": FunctionFragment;
    "getSumOfBuyFees()": FunctionFragment;
    "getSumOfSellFees()": FunctionFragment;
    "getTotalDividendsDistributed()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "maxWalletMode()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "processDividendTracker(uint256)": FunctionFragment;
    "recover()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellFees()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setBuyFees(uint256,uint256,uint256)": FunctionFragment;
    "setIsTradingEnabled(bool)": FunctionFragment;
    "setMarketingWallet(address)": FunctionFragment;
    "setMaxWalletAmount(uint256)": FunctionFragment;
    "setMaxWalletMode(uint8)": FunctionFragment;
    "setSellFees(uint256,uint256,uint256)": FunctionFragment;
    "setWhaleFee(uint256)": FunctionFragment;
    "setblackblock(uint256,uint256)": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateClaimWait(uint256)": FunctionFragment;
    "updateDividendTracker(address)": FunctionFragment;
    "updateGasForProcessing(uint256)": FunctionFragment;
    "updateUniswapV2Router(address)": FunctionFragment;
    "whaleFee()": FunctionFragment;
    "withdrawableDividendOf(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SetBlacklistFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedFromMaxWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_marketingWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "buyFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deadWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxWallet",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "gasForProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfoAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimWait",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWalletAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDividendTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSumOfBuyFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSumOfSellFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDividendTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "recover", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTradingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhaleFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setblackblock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDividendTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasForProcessing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapV2Router",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whaleFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "CAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SetBlacklistFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedFromMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_marketingWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfoAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDividendTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSumOfBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSumOfSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhaleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setblackblock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whaleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "GasForProcessingUpdated(uint256,uint256)": EventFragment;
    "LiquidityWalletUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "SendDividends(uint256,uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateDividendTracker(address,address)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasForProcessingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessedDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendDividends"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
}

export class NYCAKE extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NYCAKEInterface;

  functions: {
    CAKE(overrides?: CallOverrides): Promise<[string]>;

    "CAKE()"(overrides?: CallOverrides): Promise<[string]>;

    SetBlacklistFee(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SetBlacklistFee(uint256)"(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "_isBlacklisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isExcludedFromMaxWallet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "_isExcludedFromMaxWallet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    "_marketingWalletAddress()"(overrides?: CallOverrides): Promise<[string]>;

    _maxWalletAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_maxWalletAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "blacklistAddress(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    "buyFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    deadWallet(overrides?: CallOverrides): Promise<[string]>;

    "deadWallet()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dividendTracker(overrides?: CallOverrides): Promise<[string]>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<[string]>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    excludeFromMaxWallet(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeFromMaxWallet(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<[BigNumber]>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxWalletAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaxWalletAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSumOfBuyFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSumOfBuyFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSumOfSellFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSumOfSellFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxWalletMode(overrides?: CallOverrides): Promise<[number]>;

    "maxWalletMode()"(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recover(overrides?: Overrides): Promise<ContractTransaction>;

    "recover()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sellFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    "sellFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBuyFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBuyFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIsTradingEnabled(
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIsTradingEnabled(bool)"(
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketingWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxWalletAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxWalletAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxWalletMode(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxWalletMode(uint8)"(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSellFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSellFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhaleFee(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhaleFee(uint256)"(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setblackblock(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setblackblock(uint256,uint256)"(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<[string]>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whaleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "whaleFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  CAKE(overrides?: CallOverrides): Promise<string>;

  "CAKE()"(overrides?: CallOverrides): Promise<string>;

  SetBlacklistFee(
    BlacklistMarketfee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SetBlacklistFee(uint256)"(
    BlacklistMarketfee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "_isBlacklisted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isExcludedFromMaxWallet(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isExcludedFromMaxWallet(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

  "_marketingWalletAddress()"(overrides?: CallOverrides): Promise<string>;

  _maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "automatedMarketMakerPairs(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklistAddress(
    account: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "blacklistAddress(address,bool)"(
    account: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dividendsFee: BigNumber;
      marketingFee: BigNumber;
      liquidityFee: BigNumber;
    }
  >;

  "buyFees()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dividendsFee: BigNumber;
      marketingFee: BigNumber;
      liquidityFee: BigNumber;
    }
  >;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  deadWallet(overrides?: CallOverrides): Promise<string>;

  "deadWallet()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dividendTokenBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dividendTokenBalanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dividendTracker(overrides?: CallOverrides): Promise<string>;

  "dividendTracker()"(overrides?: CallOverrides): Promise<string>;

  excludeFromDividends(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeFromDividends(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeFromFees(address,bool)"(
    account: string,
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  excludeFromMaxWallet(
    account: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeFromMaxWallet(address,bool)"(
    account: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

  "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDividendsInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getAccountDividendsInfo(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getAccountDividendsInfoAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getAccountDividendsInfoAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

  "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfDividendTokenHolders(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumberOfDividendTokenHolders()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSumOfBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

  "getSumOfBuyFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSumOfSellFees(overrides?: CallOverrides): Promise<BigNumber>;

  "getSumOfSellFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDividendsDistributed()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExcludedFromFees(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxWalletMode(overrides?: CallOverrides): Promise<number>;

  "maxWalletMode()"(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  processDividendTracker(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processDividendTracker(uint256)"(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recover(overrides?: Overrides): Promise<ContractTransaction>;

  "recover()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sellFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dividendsFee: BigNumber;
      marketingFee: BigNumber;
      liquidityFee: BigNumber;
    }
  >;

  "sellFees()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dividendsFee: BigNumber;
      marketingFee: BigNumber;
      liquidityFee: BigNumber;
    }
  >;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAutomatedMarketMakerPair(address,bool)"(
    pair: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBuyFees(
    _dividendsFee: BigNumberish,
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBuyFees(uint256,uint256,uint256)"(
    _dividendsFee: BigNumberish,
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIsTradingEnabled(
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIsTradingEnabled(bool)"(
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarketingWallet(
    wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketingWallet(address)"(
    wallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxWalletAmount(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxWalletAmount(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxWalletMode(
    mode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxWalletMode(uint8)"(
    mode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSellFees(
    _dividendsFee: BigNumberish,
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSellFees(uint256,uint256,uint256)"(
    _dividendsFee: BigNumberish,
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhaleFee(
    _whaleFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhaleFee(uint256)"(
    _whaleFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setblackblock(
    blackfee: BigNumberish,
    blackblock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setblackblock(uint256,uint256)"(
    blackfee: BigNumberish,
    blackblock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  "uniswapV2Pair()"(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  "uniswapV2Router()"(overrides?: CallOverrides): Promise<string>;

  updateClaimWait(
    claimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateClaimWait(uint256)"(
    claimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDividendTracker(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDividendTracker(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateGasForProcessing(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateGasForProcessing(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswapV2Router(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUniswapV2Router(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whaleFee(overrides?: CallOverrides): Promise<BigNumber>;

  "whaleFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawableDividendOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawableDividendOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CAKE(overrides?: CallOverrides): Promise<string>;

    "CAKE()"(overrides?: CallOverrides): Promise<string>;

    SetBlacklistFee(
      BlacklistMarketfee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "SetBlacklistFee(uint256)"(
      BlacklistMarketfee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "_isBlacklisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isExcludedFromMaxWallet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isExcludedFromMaxWallet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<string>;

    "_marketingWalletAddress()"(overrides?: CallOverrides): Promise<string>;

    _maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "blacklistAddress(address,bool)"(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    buyFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    "buyFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    deadWallet(overrides?: CallOverrides): Promise<string>;

    "deadWallet()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<string>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<string>;

    excludeFromDividends(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxWallet(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeFromMaxWallet(address,bool)"(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSumOfBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getSumOfBuyFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSumOfSellFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getSumOfSellFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxWalletMode(overrides?: CallOverrides): Promise<number>;

    "maxWalletMode()"(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recover(overrides?: CallOverrides): Promise<void>;

    "recover()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sellFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    "sellFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dividendsFee: BigNumber;
        marketingFee: BigNumber;
        liquidityFee: BigNumber;
      }
    >;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBuyFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTradingEnabled(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsTradingEnabled(bool)"(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketingWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxWalletAmount(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletMode(
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxWalletMode(uint8)"(
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSellFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhaleFee(
      _whaleFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhaleFee(uint256)"(
      _whaleFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setblackblock(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setblackblock(uint256,uint256)"(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<string>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDividendTracker(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whaleFee(overrides?: CallOverrides): Promise<BigNumber>;

    "whaleFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    ExcludeFromFees(account: string | null, isExcluded: null): EventFilter;

    GasForProcessingUpdated(
      newValue: BigNumberish | null,
      oldValue: BigNumberish | null
    ): EventFilter;

    LiquidityWalletUpdated(
      newLiquidityWallet: string | null,
      oldLiquidityWallet: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProcessedDividendTracker(
      iterations: null,
      claims: null,
      lastProcessedIndex: null,
      automatic: boolean | null,
      gas: null,
      processor: string | null
    ): EventFilter;

    SendDividends(amountIn: null, dividends: null): EventFilter;

    SetAutomatedMarketMakerPair(
      pair: string | null,
      value: boolean | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UpdateDividendTracker(
      newAddress: string | null,
      oldAddress: string | null
    ): EventFilter;

    UpdateUniswapV2Router(
      newAddress: string | null,
      oldAddress: string | null
    ): EventFilter;
  };

  estimateGas: {
    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    "CAKE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SetBlacklistFee(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SetBlacklistFee(uint256)"(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_isBlacklisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isExcludedFromMaxWallet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isExcludedFromMaxWallet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _marketingWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "_marketingWalletAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "blacklistAddress(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyFees(overrides?: CallOverrides): Promise<BigNumber>;

    "buyFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    deadWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "deadWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<BigNumber>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    excludeFromMaxWallet(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeFromMaxWallet(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxWalletAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxWalletAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSumOfBuyFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getSumOfBuyFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSumOfSellFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getSumOfSellFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWalletMode(overrides?: CallOverrides): Promise<BigNumber>;

    "maxWalletMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recover(overrides?: Overrides): Promise<BigNumber>;

    "recover()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sellFees(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBuyFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBuyFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIsTradingEnabled(
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIsTradingEnabled(bool)"(
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMarketingWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxWalletAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxWalletAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxWalletMode(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxWalletMode(uint8)"(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSellFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSellFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhaleFee(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhaleFee(uint256)"(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setblackblock(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setblackblock(uint256,uint256)"(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whaleFee(overrides?: CallOverrides): Promise<BigNumber>;

    "whaleFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CAKE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetBlacklistFee(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SetBlacklistFee(uint256)"(
      BlacklistMarketfee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isBlacklisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isBlacklisted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isExcludedFromMaxWallet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isExcludedFromMaxWallet(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _marketingWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_marketingWalletAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _maxWalletAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_maxWalletAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAddress(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "blacklistAddress(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "buyFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deadWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deadWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividendTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dividendTracker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    excludeFromMaxWallet(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeFromMaxWallet(address,bool)"(
      account: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasForProcessing()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastProcessedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxWalletAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxWalletAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSumOfBuyFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSumOfBuyFees()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSumOfSellFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSumOfSellFees()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWalletMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxWalletMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recover(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recover()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sellFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBuyFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBuyFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIsTradingEnabled(
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIsTradingEnabled(bool)"(
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarketingWallet(
      wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketingWallet(address)"(
      wallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxWalletAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxWalletAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxWalletMode(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxWalletMode(uint8)"(
      mode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSellFees(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSellFees(uint256,uint256,uint256)"(
      _dividendsFee: BigNumberish,
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhaleFee(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhaleFee(uint256)"(
      _whaleFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setblackblock(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setblackblock(uint256,uint256)"(
      blackfee: BigNumberish,
      blackblock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapTokensAtAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2Router()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whaleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whaleFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
